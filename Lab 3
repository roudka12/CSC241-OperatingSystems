/*
* Kelly Roudebush
* CSC241
* Lab4
*/

#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

/* Function declarations */
void process();

/* Handler functions */
void alarmHandler(int sig);	
void ctrlZHandler(int sig);

/* errorChecking and initialization */
void errorChecking(int argc);
void initRevealedArray();
void hideTheWord();

/* helper functions */
int check_Rand(int randIndex);
void revealAChar();
int numRevealed();



/* Global variables */
char* hidden_word; 				/* Word inputed to hide */
int* array_revealed;				/* variable to keep track of which chars are known */

/* ---------------------------------Main()-------------------------------------------------------- */ 

int main( int argc, char *argv[] )
{
	struct sigaction action;		/* Declare a struct sigaction */
	srand(time(NULL));			/* randomize seed for rand() */

	errorChecking(argc);
	
	/* --------Signal/Struct initalization----------------- */ 
	sigemptyset(&action.sa_mask);		/* zero out sa_mask */
	action.sa_handler = alarmHandler;	/* Set the handler */
	action.sa_flags = SA_RESTART;		/* Set flags */
	
	sigaction(SIGALRM, &action, NULL);	/* Call sigaction with the action structure */
	signal(SIGTSTP, ctrlZHandler);		/* control-Z signal */
	
	hidden_word = argv[1];			/* set pointer to hidden word string */
	
	initRevealedArray();	/* Initialize Array to keep track of chars that are revealed to the user */
	
	hideTheWord();				/* Show the user the initial "_ _ _ _ _ ... " */
	alarm(5);				/* Schedule an alarm */
	
	while(1)
	{
		process();	
	}
	
	return 0;
}

/* --------------------------------Functions--------------------------------------------------- */ 
/* Proccesses user input */
void process(){
	char guess[128] = "";	/* buffer array to process input word*/
	
	int hiddenWordLength = strlen(hidden_word);	/* Need length of hidden word */
	int num_CharKnown = numRevealed();		/* Number of chars revealed to compare against total length */


	while(num_CharKnown != hiddenWordLength) {	/* While you don't know all the letters */

		printf("What is your guess?  \n");
		scanf(" %s", guess);

		while((guess[0] == '\0') && (guess != NULL)){	/* While guess isn't null or empty/ You aren't using cheat mode */
			scanf(" %s", guess);
		}
		
		if (strcmp(hidden_word, guess) == 0){		/* See if inputed word is correct */
			printf("WOW! Congrulations! You got it right! \n");
			break;
		}
		num_CharKnown = numRevealed();	/* Update number revealed to check against total length (Becuase alarm might occur */
	}
	num_CharKnown = numRevealed();
	if (num_CharKnown == strlen(hidden_word)){
		printf("Whoops! You have all the letters, can't really 'guess' anymore, huh?\n");
	}
	
	
	free(array_revealed);
	exit(1);
	return;
}

/* --------------------------------Handler Functions------------------------------------------- */ 

/* Alarm handler: keeps track of longest amount time the program would run */
/* Longest time = number of characters in hidden_word * 5 */
void alarmHandler(int sig){
	static int current_sec = 0;
	
	int total_time = strlen(hidden_word) *  5;	/* Max amount of time program can run */
	int nums_revealedToMe = 0;			/* Number of chars revealed to me */
	
	system("clear"); 				/* issue clear command */

	
	nums_revealedToMe = numRevealed();
	if (nums_revealedToMe == strlen(hidden_word)){	/* When there are no more letters left to show  */
		printf("I can't show you any more letters, You've been given them all\n");
		printf("Looks like it's your loss...\n");
		exit(1);
	}
	
	revealAChar();				/* Reveal one character */
	current_sec = current_sec + 5;		/* Increment number fo seconds that have passed by 5 due to time of alarm */
	
	if (current_sec == total_time ){
		printf("You ran out of time! Sorry, you lose! \n");
		free(array_revealed);
		exit(1);
	}
	alarm(5);				/* Reset alarm */
}

/*
* Reveal to user a character in cheat mode
*/
void ctrlZHandler( int sig ){	

	int totalLength;
	int isRandGood;
	int randIndex;
	int i ;
	int k;
	
	system("clear");	/* Clear signals */
	
	totalLength = strlen(hidden_word);
	isRandGood = 0;	/* 0 if char at index is revealed, will become 1 when not */
	randIndex = 0;	/* Index of the perspective char to reveal */


	printf("Welcome to Cheat Mode! >:)\n");
	while (isRandGood == 0){		/* Pick a random char to show, make sure it hasn't already been shown  */
		randIndex = (rand() % ( totalLength )) ; /* compute rand */
		isRandGood = check_Rand(randIndex);	/* Check to make sure rand chosen can be shown */
	}
	
	printf("Here's a little hint:\n");
	k= strlen(hidden_word);
	for( i = 0 ; i < k; i++){	/* Show user the letter */
		if (i == randIndex){
			printf("%c ", hidden_word[i]);
			break;
		}
	}
	printf("\n");
	signal(SIGTSTP, ctrlZHandler);
} 

/* --------------------------------Helper Functions----------------------------------------------- */ 
/* To find how many letters in hidden_word are revealed*/
int numRevealed(){
	int i = 0;
	int numberRevealed = 0;
	for (i = 0; i < strlen(hidden_word); i++){
		if(array_revealed[i] == 1){
			numberRevealed++;
		}
	}
	return numberRevealed;
}

/* Make sure index chosen hasn't already been shown. returns 1 if not revealed, 0 if revealed */
int check_Rand(int randIndex){
	int i;
	for (i = 0; i < strlen(hidden_word); i++){
		if(array_revealed[i] == 1 && randIndex == i){	/* You've already revealed this! */
			return 0;
		}
		else if (array_revealed[i] == 0 && randIndex == i){ /* You have not revealed this */
			return 1;
		}
	}
	return -1;
}

/*show one char randomly picked*/
void revealAChar(){
	
	int hiddenWordLength = strlen(hidden_word);	/* Figure out hidden_word length */
	int isRandGood = 0;				/* Use to determine if rand index chosen is "good" */
	int r, i ;
	i = 0;
	r = 0;
	
	while (isRandGood == 0){			/* While rand index computed is not good (already revealed) */
		r = (rand() % hiddenWordLength);	/* find new rand */
		isRandGood = check_Rand(r);		/* Check if this rand is good */
	}
	system("clear");				/* Clear the screen */

	for( i = 0 ; i < strlen(hidden_word); i++){	/* Reveal char at the chosen position */
		if(array_revealed[i] == 1){
			printf("%c ", hidden_word[i]);
		}
		else if (i == r){
			printf("%c ",hidden_word[i]);
			array_revealed[i] = 1;
		}
		else{
			printf("_ ");
		}
	}
	printf("\n");
}

/* ------------------------------Error Checking and Initialization------------------------------------- */ 

void errorChecking(int argc){
	if (argc != 2){				
			printf("Commandline argument error: Please check what you've inputed");
			exit(1);
		}
}
/* Array for keeping track of which chars are revealed to the user */
void initRevealedArray(){
	int i;
	array_revealed = (int*) malloc(strlen(hidden_word) * sizeof(int) + 1 );
	for(i = 0; i < strlen(hidden_word); i++){
		array_revealed[i] = 0;	/* make everything 0 or "Not revealed yet" */
	}
}

void hideTheWord(){
	int i;
	for(i = 0; i < strlen(hidden_word); i++){
		printf("_ ");
	}
	printf("\n");
}

